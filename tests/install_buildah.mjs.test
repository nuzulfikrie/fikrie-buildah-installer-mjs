import { expect } from 'chai';

describe('install-buildah.mjs', () => {
  it('should install Buildah successfully', async () => {
    // Mock the `zx` function.
    const zxMock = jest.mock('zx');

    // Create a mock progress bar.
    const progressBarMock = {
      total: 6,
      done() {},
      abort() {},
    };

    // Set the `progress` function to return the mock progress bar.
    jest.mock('zx/experimental/progress', () => ({
      progress() {
        return progressBarMock;
      },
    }));

    // Run the install-buildah.mjs script.
    await require('../installer/install_buildah.mjs');

    // Expect the `zx` function to have been called with the correct commands.
    expect(zxMock).toHaveBeenCalledWith('sudo apt update');
    expect(zxMock).toHaveBeenCalledWith('sudo apt install -y software-properties-common');
    expect(zxMock).toHaveBeenCalledWith(`sudo sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Raspbian_10/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"`);
    expect(zxMock).toHaveBeenCalledWith('wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/Raspbian_10/Release.key -O- | sudo apt-key add -');
    expect(zxMock).toHaveBeenCalledWith('sudo apt update');
    expect(zxMock).toHaveBeenCalledWith('sudo apt install -y buildah');
    expect(zxMock).toHaveBeenCalledWith('buildah --version');

    // Expect the progress bar to have been updated correctly.
    expect(progressBarMock.total).toBe(6);
    expect(progressBarMock.done).toHaveBeenCalledTimes(1);
    expect(progressBarMock.abort).not.toHaveBeenCalled();
  });
});