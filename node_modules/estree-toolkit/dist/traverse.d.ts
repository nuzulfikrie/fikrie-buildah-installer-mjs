import { Node } from './estree';
import { Context, NodePath } from './nodepath';
import { AliasMap } from './aliases';
export type VisitorContext = {
    stopped: boolean;
    stop(): void;
};
export type VisitorFn<T extends Node = Node, S = unknown> = (this: VisitorContext, path: NodePath<T>, state: S) => void;
export type ExpandedVisitor<T extends Node, S> = {
    enter?: VisitorFn<T, S>;
    leave?: VisitorFn<T, S>;
};
export type Visitor<T extends Node = Node, S = unknown> = VisitorFn<T, S> | ExpandedVisitor<T, S>;
export type Visitors<S> = {
    [K in Node as `${K['type']}`]?: Visitor<K, S>;
} & {
    [K in keyof AliasMap]?: Visitor<AliasMap[K], S>;
};
export type ExpandedVisitors<S = unknown> = {
    [type: string]: ExpandedVisitor<Node, S> | undefined;
};
export type TraverseOptions = {
    /** Enable/disable scope information tracking */
    scope?: boolean;
    /** Enable/disable validation in `Node` builders */
    validateNodes?: boolean;
    /** Function to use when cloning node using `NodePath.cloneNode()` */
    cloneFunction?: (node: any) => any;
};
export declare class Traverser {
    private readonly visitors;
    constructor(visitors: ExpandedVisitors<any>);
    visitPath<S>(visitorCtx: VisitorContext, path: NodePath, state: S, visitedPaths: WeakSet<NodePath>, visitOnlyChildren?: boolean): {
        new: NodePath<Node, Node>[];
        unSkipped: NodePath<Node, Node>[];
    } | undefined;
    static expandVisitors<S = unknown>(visitors: Visitors<S>): ExpandedVisitors<S>;
    static traverseNode<S = unknown>(data: {
        node: Node;
        parentPath: NodePath | null;
        state: S | undefined;
        ctx: Context;
        visitOnlyChildren?: boolean;
    } & ({
        expand: true;
        visitors: Visitors<S>;
    } | {
        expand: false;
        visitors: ExpandedVisitors<S>;
    })): void;
}
export declare const traverse: <NodeT, StateT>(node: NodeT, visitors: {
    Property?: Visitor<import("estree").AssignmentProperty | import("estree").Property, StateT> | undefined;
    CatchClause?: Visitor<import("estree").CatchClause, StateT> | undefined;
    ClassDeclaration?: Visitor<import("estree").ClassDeclaration, StateT> | undefined;
    ClassExpression?: Visitor<import("estree").ClassExpression, StateT> | undefined;
    ClassBody?: Visitor<import("estree").ClassBody, StateT> | undefined;
    ArrayExpression?: Visitor<import("estree").ArrayExpression, StateT> | undefined;
    ArrowFunctionExpression?: Visitor<import("estree").ArrowFunctionExpression, StateT> | undefined;
    AssignmentExpression?: Visitor<import("estree").AssignmentExpression, StateT> | undefined;
    AwaitExpression?: Visitor<import("estree").AwaitExpression, StateT> | undefined;
    BinaryExpression?: Visitor<import("estree").BinaryExpression, StateT> | undefined;
    CallExpression?: Visitor<import("estree").SimpleCallExpression, StateT> | undefined;
    NewExpression?: Visitor<import("estree").NewExpression, StateT> | undefined;
    ChainExpression?: Visitor<import("estree").ChainExpression, StateT> | undefined;
    ConditionalExpression?: Visitor<import("estree").ConditionalExpression, StateT> | undefined;
    FunctionExpression?: Visitor<import("estree").FunctionExpression, StateT> | undefined;
    Identifier?: Visitor<import("estree").Identifier, StateT> | undefined;
    ImportExpression?: Visitor<import("estree").ImportExpression, StateT> | undefined;
    Literal?: Visitor<import("estree").SimpleLiteral | import("estree").RegExpLiteral | import("estree").BigIntLiteral, StateT> | undefined;
    LogicalExpression?: Visitor<import("estree").LogicalExpression, StateT> | undefined;
    MemberExpression?: Visitor<import("estree").MemberExpression, StateT> | undefined;
    MetaProperty?: Visitor<import("estree").MetaProperty, StateT> | undefined;
    ObjectExpression?: Visitor<import("estree").ObjectExpression, StateT> | undefined;
    SequenceExpression?: Visitor<import("estree").SequenceExpression, StateT> | undefined;
    TaggedTemplateExpression?: Visitor<import("estree").TaggedTemplateExpression, StateT> | undefined;
    TemplateLiteral?: Visitor<import("estree").TemplateLiteral, StateT> | undefined;
    ThisExpression?: Visitor<import("estree").ThisExpression, StateT> | undefined;
    UnaryExpression?: Visitor<import("estree").UnaryExpression, StateT> | undefined;
    UpdateExpression?: Visitor<import("estree").UpdateExpression, StateT> | undefined;
    YieldExpression?: Visitor<import("estree").YieldExpression, StateT> | undefined;
    JSXElement?: Visitor<import("estree-jsx").JSXElement, StateT> | undefined;
    FunctionDeclaration?: Visitor<import("estree").FunctionDeclaration, StateT> | undefined;
    MethodDefinition?: Visitor<import("estree").MethodDefinition, StateT> | undefined;
    ImportDeclaration?: Visitor<import("estree").ImportDeclaration, StateT> | undefined;
    ExportNamedDeclaration?: Visitor<import("estree").ExportNamedDeclaration, StateT> | undefined;
    ExportDefaultDeclaration?: Visitor<import("estree").ExportDefaultDeclaration, StateT> | undefined;
    ExportAllDeclaration?: Visitor<import("estree").ExportAllDeclaration, StateT> | undefined;
    ImportSpecifier?: Visitor<import("estree").ImportSpecifier, StateT> | undefined;
    ImportDefaultSpecifier?: Visitor<import("estree").ImportDefaultSpecifier, StateT> | undefined;
    ImportNamespaceSpecifier?: Visitor<import("estree").ImportNamespaceSpecifier, StateT> | undefined;
    ExportSpecifier?: Visitor<import("estree").ExportSpecifier, StateT> | undefined;
    ObjectPattern?: Visitor<import("estree").ObjectPattern, StateT> | undefined;
    ArrayPattern?: Visitor<import("estree").ArrayPattern, StateT> | undefined;
    RestElement?: Visitor<import("estree").RestElement, StateT> | undefined;
    AssignmentPattern?: Visitor<import("estree").AssignmentPattern, StateT> | undefined;
    PrivateIdentifier?: Visitor<import("estree").PrivateIdentifier, StateT> | undefined;
    Program?: Visitor<import("estree").Program, StateT> | undefined;
    PropertyDefinition?: Visitor<import("estree").PropertyDefinition, StateT> | undefined;
    SpreadElement?: Visitor<import("estree").SpreadElement, StateT> | undefined;
    ExpressionStatement?: Visitor<import("estree").ExpressionStatement, StateT> | undefined;
    BlockStatement?: Visitor<import("estree").BlockStatement, StateT> | undefined;
    StaticBlock?: Visitor<import("estree").StaticBlock, StateT> | undefined;
    EmptyStatement?: Visitor<import("estree").EmptyStatement, StateT> | undefined;
    DebuggerStatement?: Visitor<import("estree").DebuggerStatement, StateT> | undefined;
    WithStatement?: Visitor<import("estree").WithStatement, StateT> | undefined;
    ReturnStatement?: Visitor<import("estree").ReturnStatement, StateT> | undefined;
    LabeledStatement?: Visitor<import("estree").LabeledStatement, StateT> | undefined;
    BreakStatement?: Visitor<import("estree").BreakStatement, StateT> | undefined;
    ContinueStatement?: Visitor<import("estree").ContinueStatement, StateT> | undefined;
    IfStatement?: Visitor<import("estree").IfStatement, StateT> | undefined;
    SwitchStatement?: Visitor<import("estree").SwitchStatement, StateT> | undefined;
    ThrowStatement?: Visitor<import("estree").ThrowStatement, StateT> | undefined;
    TryStatement?: Visitor<import("estree").TryStatement, StateT> | undefined;
    WhileStatement?: Visitor<import("estree").WhileStatement, StateT> | undefined;
    DoWhileStatement?: Visitor<import("estree").DoWhileStatement, StateT> | undefined;
    ForStatement?: Visitor<import("estree").ForStatement, StateT> | undefined;
    ForInStatement?: Visitor<import("estree").ForInStatement, StateT> | undefined;
    ForOfStatement?: Visitor<import("estree").ForOfStatement, StateT> | undefined;
    VariableDeclaration?: Visitor<import("estree").VariableDeclaration, StateT> | undefined;
    Super?: Visitor<import("estree").Super, StateT> | undefined;
    SwitchCase?: Visitor<import("estree").SwitchCase, StateT> | undefined;
    TemplateElement?: Visitor<import("estree").TemplateElement, StateT> | undefined;
    VariableDeclarator?: Visitor<import("estree").VariableDeclarator, StateT> | undefined;
    JSXIdentifier?: Visitor<import("estree-jsx").JSXIdentifier, StateT> | undefined;
    JSXNamespacedName?: Visitor<import("estree-jsx").JSXNamespacedName, StateT> | undefined;
    JSXMemberExpression?: Visitor<import("estree-jsx").JSXMemberExpression, StateT> | undefined;
    JSXEmptyExpression?: Visitor<import("estree-jsx").JSXEmptyExpression, StateT> | undefined;
    JSXExpressionContainer?: Visitor<import("estree-jsx").JSXExpressionContainer, StateT> | undefined;
    JSXSpreadAttribute?: Visitor<import("estree-jsx").JSXSpreadAttribute, StateT> | undefined;
    JSXAttribute?: Visitor<import("estree-jsx").JSXAttribute, StateT> | undefined;
    JSXOpeningElement?: Visitor<import("estree-jsx").JSXOpeningElement, StateT> | undefined;
    JSXOpeningFragment?: Visitor<import("estree-jsx").JSXOpeningFragment, StateT> | undefined;
    JSXClosingElement?: Visitor<import("estree-jsx").JSXClosingElement, StateT> | undefined;
    JSXClosingFragment?: Visitor<import("estree-jsx").JSXClosingFragment, StateT> | undefined;
    JSXFragment?: Visitor<import("estree-jsx").JSXFragment, StateT> | undefined;
    JSXText?: Visitor<import("estree-jsx").JSXText, StateT> | undefined;
    JSXSpreadChild?: Visitor<import("estree-jsx").JSXSpreadChild, StateT> | undefined;
} & {
    Function?: Visitor<import("estree").Function, StateT> | undefined;
    Statement?: Visitor<import("estree").Statement, StateT> | undefined;
    Declaration?: Visitor<import("estree").Declaration, StateT> | undefined;
    Expression?: Visitor<import("estree").Expression, StateT> | undefined;
    Pattern?: Visitor<import("estree").Pattern, StateT> | undefined;
    Class?: Visitor<import("estree").Class, StateT> | undefined;
    ExportDeclaration?: Visitor<import("estree").ExportNamedDeclaration | import("estree").ExportDefaultDeclaration | import("estree").ExportAllDeclaration, StateT> | undefined;
    Loop?: Visitor<import("estree").WhileStatement | import("estree").DoWhileStatement | import("estree").ForStatement | import("estree").ForInStatement | import("estree").ForOfStatement, StateT> | undefined;
    ModuleDeclaration?: Visitor<import("estree").ModuleDeclaration, StateT> | undefined;
} & {
    $?: TraverseOptions | undefined;
}, state?: StateT | undefined) => void;
